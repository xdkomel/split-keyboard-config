/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        cstmmt: custom_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESCAPE     &kp Q  &kp W             &cstmmt LCTRL E  &kp R           &kp T          &kp Y      &kp U            &cstmmt LCTRL I  &kp O                 &kp P          &kp LEFT_BRACKET
&kp CAPSLOCK   &kp A  &cstmmt LSHIFT S  &cstmmt LALT D   &cstmmt LCMD F  &kp G          &kp H      &cstmmt LCMD J   &cstmmt LALT K   &cstmmt LEFT_SHIFT L  &kp SEMICOLON  &kp SQT
&kp BACKSPACE  &kp Z  &kp X             &kp C            &kp V           &kp B          &kp N      &kp M            &kp COMMA        &kp PERIOD            &kp FSLH       &kp F5
                                        &lt 4 GRAVE      &mt LCMD TAB    &lt 2 SPACE    &lt 1 RET  &lt 3 BACKSPACE  &lt 5 ESCAPE
            >;
        };

        r1 {
            bindings = <
&trans  &trans  &trans          &kp LCTRL  &trans    &trans    &kp BACKSLASH          &kp PIPE        &kp UP_ARROW          &kp ASTERISK     &trans       &trans
&trans  &trans  &kp LEFT_SHIFT  &kp LALT   &kp LCMD  &trans    &kp AMPERSAND          &kp LEFT_ARROW  &kp DOWN_ARROW        &kp RIGHT_ARROW  &kp PERCENT  &trans
&trans  &trans  &trans          &trans     &trans    &trans    &kp RIGHT_PARENTHESIS  &kp SQT         &kp LEFT_PARENTHESIS  &kp AT_SIGN      &kp HASH     &trans
                                &trans     &trans    &trans    &trans                 &trans          &trans
            >;
        };

        l1 {
            bindings = <
&trans  &trans     &kp LEFT_BRACKET  &kp MINUS       &kp EXCL          &kp RIGHT_BRACKET    &trans  &trans         &kp LCTRL  &trans          &trans  &trans
&trans  &kp CARET  &kp LEFT_BRACE    &kp UNDERSCORE  &kp DOLLAR        &kp RIGHT_BRACE      &trans  &kp LCMD       &kp LALT   &kp LEFT_SHIFT  &trans  &trans
&trans  &trans     &kp EQUAL         &kp LESS_THAN   &kp GREATER_THAN  &kp PLUS             &trans  &trans         &trans     &trans          &trans  &trans
                                     &trans          &trans            &trans               &trans  &kp BACKSPACE  &trans
            >;
        };

        r2 {
            bindings = <
&trans  &trans  &trans          &kp LCTRL  &trans    &trans    &trans      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &trans
&trans  &trans  &kp LEFT_SHIFT  &kp LALT   &kp LCMD  &trans    &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0  &trans
&trans  &trans  &trans          &trans     &trans    &trans    &kp COMMA   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans        &trans
                                &trans     &trans    &trans    &trans      &trans        &trans
            >;
        };

        l2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        additional {
            bindings = <
&trans  &trans  &trans  &bt BT_NXT  &trans  &kp BACKSLASH    &trans  &trans                &kp C_VOLUME_UP    &trans                &trans  &trans
&trans  &trans  &trans  &bt BT_CLR  &trans  &trans           &trans  &kp C_BRIGHTNESS_DEC  &kp K_VOLUME_DOWN  &kp C_BRIGHTNESS_INC  &trans  &trans
&trans  &trans  &trans  &trans      &trans  &trans           &trans  &kp RIGHT_BRACKET     &kp K_MUTE         &trans                &trans  &trans
                        &trans      &trans  &trans           &trans  &trans                &trans
            >;
        };
    };
};
