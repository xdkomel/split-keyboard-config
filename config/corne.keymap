/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrm: custom_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ch_locale {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        quick_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <3 8>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        cmd_tab {
            bindings = <&mt LMETA TAB>;
            key-positions = <37 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        ctrl_tab {
            bindings = <&mt LEFT_CONTROL TAB>;
            key-positions = <13 37>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        cmd_tilda {
            bindings = <&mt LCMD GRAVE>;
            key-positions = <13 37>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESCAPE     &kp Q         &kp W        &hrm LSHFT E      &kp R         &kp T        &kp Y      &kp U          &hrm LSHIFT I  &kp O        &kp P                 &kp LEFT_BRACKET
&none          &hrm LCTRL A  &hrm LALT S  &kp D             &hrm LCMD F   &kp G        &kp H      &hrm LCMD J    &kp K          &hrm LALT L  &hrm LCTRL SEMICOLON  &kp SQT
&kp BACKSPACE  &kp Z         &kp X        &kp C             &kp V         &kp B        &kp N      &kp M          &kp COMMA      &kp PERIOD   &lt 2 SLASH           &none
                                          &mt LSHIFT GRAVE  &mt LCMD TAB  &kp SPACE    &kp ENTER  &kp BACKSPACE  &lt 1 ESCAPE
            >;
        };

        arrows_and_symbols {
            bindings = <
&trans  &trans     &kp NUMBER_1       &mt LSHIFT NUMBER_2  &kp NUMBER_3       &kp GREATER_THAN    &kp BACKSLASH      &kp MINUS             &hrm LSHIFT SQT  &kp PLUS         &trans     &trans
&trans  &kp LCTRL  &mt LALT NUMBER_4  &kp NUMBER_5         &mt LCMD NUMBER_6  &kp LEFT_BRACE      &kp RIGHT_BRACE    &hrm LCMD UNDERSCORE  &kp UP_ARROW     &hrm LALT EQUAL  &kp LCTRL  &trans
&trans  &trans     &kp NUMBER_7       &kp NUMBER_8         &kp NUMBER_9       &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp LEFT_ARROW        &kp DOWN_ARROW   &kp RIGHT_ARROW  &trans     &trans
                                      &trans               &kp NUMBER_0       &kp SPACE           &trans             &trans                &trans
            >;
        };

        functional {
            bindings = <
&none        &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans                &kp C_VOLUME_UP    &trans                &trans  &bt BT_NXT
&trans       &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &kp C_BRIGHTNESS_DEC  &kp K_VOLUME_DOWN  &kp C_BRIGHTNESS_INC  &trans  &bt BT_CLR
&bootloader  &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans                &kp K_MUTE         &trans                &trans  &bootloader
                             &trans  &trans  &trans     &trans  &trans                &trans
            >;
        };
    };
};
